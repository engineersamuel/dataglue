// Generated by CoffeeScript 1.6.2
(function() {
  var Db, DbQuery, logger, mongodb, mysql, prettyjson, settings, utils, _;

  settings = require('../utilitis/settings');

  utils = require('../utilitis/utils');

  mysql = require('mysql');

  _ = require('lodash');

  logger = require('tracer').colorConsole(utils.logger_config);

  mongodb = require('mongodb');

  Db = require('mongodb').Db;

  prettyjson = require('prettyjson');

  DbQuery = {};

  DbQuery.query = function(dbReference, queryHash, callback) {
    var self;

    self = this;
    if (dbReference.type === 'mysql') {
      logger.debug("Querying mysql reference: " + dbReference.name + " with query: " + queryHash.query);
      DbQuery.mysqlQuery(dbReference, queryHash, function(err, results) {
        if (err) {
          return callback(err);
        } else {
          return callback(null, results);
        }
      });
    } else if (dbReference.type === 'mongo') {
      logger.debug("Querying mongo reference: " + dbReference.name + " with queryHash: " + (prettyjson.render(queryHash)));
      DbQuery.mongoQuery(dbReference, queryHash, function(err, results) {
        return callback(err, results);
      });
    }
    return self;
  };

  DbQuery.mongoQuery = function(dbReference, queryHash, callback) {
    var dbRefCopy, mongoUrl, self;

    self = this;
    dbRefCopy = _.clone(dbReference);
    if (queryHash.command != null) {
      dbRefCopy.db = 'admin';
    }
    mongoUrl = utils.generate_mongo_url(dbRefCopy);
    mongodb.connect(mongoUrl, function(err, conn) {
      if (err) {
        return logger.error(err);
      } else {
        if (queryHash.command != null) {
          return conn.command(queryHash.command, function(err, results) {
            callback(err, results);
            return conn.close();
          });
        } else {
          logger.info("Attempting to connect to collection: " + settings.master_ref.collection);
          return conn.close();
        }
      }
    });
    return self;
  };

  DbQuery.showCollections = function(dbReference, dbName, callback) {
    var dbRefCopy, mongoUrl, self;

    self = this;
    dbRefCopy = _.clone(dbReference);
    dbRefCopy.db = dbName;
    mongoUrl = utils.generate_mongo_url(dbRefCopy);
    Db.connect(mongoUrl, function(err, db) {
      if (err) {
        return logger.error(err);
      } else {
        return db.collectionNames(function(err, collectionNames) {
          callback(err, _.map(collectionNames, function(item) {
            return {
              TABLE_NAME: item.name.replace(dbName + '.', '')
            };
          }));
          return db.close();
        });
      }
    });
    return self;
  };

  DbQuery.showFields = function(dbReference, dbName, collectionName, callback) {
    var dbRefCopy, mongoUrl, self;

    self = this;
    dbRefCopy = _.clone(dbReference);
    dbRefCopy.db = dbName;
    mongoUrl = utils.generate_mongo_url(dbRefCopy);
    Db.connect(mongoUrl, function(err, db) {
      if (err) {
        return callback(err);
      } else {
        return db.collection(collectionName, function(err, coll) {
          if (err) {
            return callback(err);
          } else {
            return coll.findOne({}, function(err, doc) {
              callback(null, _.map(_.keys(doc), function(f) {
                return {
                  COLUMN_NAME: f,
                  DATA_TYPE: utils.setMongoFieldDataType(doc[f]),
                  COLUMN_TYPE: void 0,
                  COLUMN_KEY: void 0
                };
              }));
              return db.close();
            });
          }
        });
      }
    });
    return self;
  };

  DbQuery.mysqlQuery = function(dbReference, queryHash, callback) {
    var conn, mysql_ref, self;

    self = this;
    mysql_ref = settings.mysql_refs[dbReference.connection || dbReference.name];
    conn = mysql.createConnection({
      host: mysql_ref['host'],
      user: mysql_ref['user'],
      password: mysql_ref['pass']
    });
    logger.debug("Querying mysql reference: " + dbReference.connection + " with query: " + (prettyjson.render(queryHash.query)));
    conn.query(queryHash.query, function(err, results) {
      if (err) {
        logger.debug("Error Querying mysql reference: " + dbReference.connection + " with sql: " + queryHash + ", err: " + (prettyjson.render(err)));
        callback(err);
      } else {
        logger.debug("Found " + results.length + " results.");
        callback(null, results);
      }
      return conn.end();
    });
    return self;
  };

  module.exports = DbQuery;

}).call(this);

/*
//@ sourceMappingURL=dbQuery.map
*/
