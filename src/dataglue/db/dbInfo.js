// Generated by CoffeeScript 1.6.2
(function() {
  var DbInfo, DbQuery, logger, prettyjson, settings, utils, _;

  settings = require('../utilitis/settings');

  utils = require('../utilitis/utils');

  DbQuery = require('./dbQuery');

  _ = require('lodash');

  logger = require('tracer').colorConsole(utils.logger_config);

  prettyjson = require('prettyjson');

  DbInfo = {};

  DbInfo.getFields = function(dbRefName, schemaName, tableName, fieldRestrictionQuery, callback) {
    var dbReference, sql, type;

    dbReference = settings.db_refs[dbRefName];
    type = dbReference['type'];
    if (type === 'mysql') {
      sql = "SELECT COLUMN_NAME, DATA_TYPE, COLUMN_KEY, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '" + schemaName + "' AND TABLE_NAME = '" + tableName + "'";
      DbQuery.query(dbReference, {
        query: sql,
        cache: false
      }, function(err, fields) {
        return callback(err, fields);
      });
    } else if (type === 'mongo') {
      DbQuery.showFields(dbReference, schemaName, tableName, fieldRestrictionQuery, function(err, results) {
        return callback(err, results);
      });
    }
    return this;
  };

  DbInfo.getTables = function(dbRefName, schemaName, callback) {
    var dbReference, sql, type;

    dbReference = settings.db_refs[dbRefName];
    type = dbReference['type'];
    if (type === 'mysql') {
      sql = "SELECT DISTINCT TABLE_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '" + schemaName + "'";
      DbQuery.query(dbReference, {
        query: sql,
        cache: false
      }, function(err, results) {
        return callback(err, _.map(results));
      });
    } else if (type === 'mongo') {
      DbQuery.showCollections(dbReference, schemaName, function(err, results) {
        return callback(err, _.filter(results, function(item) {
          return !_.find(dbReference.excluded_tables, function(excludedTable) {
            return excludedTable === item.TABLE_NAME;
          });
        }));
      });
    }
    return this;
  };

  DbInfo.getSchemas = function(dbRefName, callback) {
    var dbReference, sql, type;

    logger.debug("Call to getSchemas");
    dbReference = settings.db_refs[dbRefName];
    type = dbReference['type'];
    logger.debug("Getting schemas for type: " + type);
    if (type === 'mysql') {
      sql = 'SELECT SCHEMA_NAME AS `schema` FROM INFORMATION_SCHEMA.SCHEMATA';
      DbQuery.query(dbReference, {
        query: sql,
        cache: false
      }, function(err, results) {
        logger.debug(prettyjson.render(results));
        return callback(err, _.filter(_.map(results, function(schema) {
          return {
            name: schema.schema
          };
        }), function(item) {
          return !_.find(dbReference.excluded_schemas, function(excludedSchema) {
            return excludedSchema === item.schema;
          });
        }));
      });
    } else if (type === 'mongo') {
      DbQuery.query(dbReference, {
        command: {
          listDatabases: 1
        }
      }, function(err, results) {
        return callback(err, _.filter(results != null ? results['databases'] : void 0, function(item) {
          return !_.find(dbReference.excluded_schemas, function(excludedSchema) {
            return excludedSchema === item.name;
          });
        }));
      });
    }
    return this;
  };

  module.exports = DbInfo;

}).call(this);

/*
//@ sourceMappingURL=dbInfo.map
*/
