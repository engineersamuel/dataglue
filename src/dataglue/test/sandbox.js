// Generated by CoffeeScript 1.6.2
(function() {
  var dataSetCache, dbLogic, logger, pj, prettyjson, sandbox, settings, snappy, utils, zlib, _;

  settings = require('../utilitis/settings');

  utils = require('../utilitis/utils');

  logger = require('tracer').colorConsole(utils.logger_config);

  pj = require('prettyjson');

  dataSetCache = require('../db/dataset_cache');

  dbLogic = require('../db/db_logic');

  snappy = require('snappy');

  zlib = require('zlib');

  prettyjson = require('prettyjson');

  _ = require('lodash');

  sandbox = {};

  sandbox.hashEach = function() {
    var test;

    test = {
      a: 1,
      b: 2
    };
    return _.each(test, function(value, key) {
      return logger.debug("key: " + key + ", value: " + value);
    });
  };

  sandbox.test_query_dataset = function() {
    var p;

    p = dbLogic.queryDataSet('52277447f95fb65818000001');
    return p.on('dataset', function(dataset) {
      return console.log(dataset);
    });
  };

  sandbox.test_snappy = function(stuff) {
    var data;

    return data = snappy.compress(stuff, function(err, data) {
      return logger.info("Compressed text: " + data);
    });
  };

  sandbox.test_compress = function(input) {
    return zlib.deflate(input, function(err, buffer) {
      logger.info("Compressed: " + buffer);
      return logger.info("Compressed: " + (buffer.toString('base64')));
    });
  };

  sandbox.test_decompress = function(input) {
    var buff;

    buff = new Buffer(input, 'base64');
    logger.info("buff: " + (buff.toString('base64')));
    return zlib.unzip(buff, function(err, results) {
      return logger.info("Decompressed: " + (results.toString()));
    });
  };

  sandbox.ref_get = function(_id) {
    logger.debug("Looking up ref with _id: " + _id);
    return dataSetCache.ref_get(_id, function(err, doc) {
      return logger.debug(prettyjson.render(result));
    });
  };

  sandbox.dataset_get = function(_id) {
    logger.debug("Looking up data set with _id: " + _id);
    return dataSetCache.ref_get(_id, function(err, doc) {
      var p;

      p = dbLogic.loadDataSet(doc);
      return p.on('resultsReady', function(results) {
        logger.debug(typeof results);
        return logger.debug(JSON.stringify(results));
      });
    });
  };

  sandbox.test_parse_string = function() {
    var s;

    s = "52277447f95fb65818000001";
    return logger.info(JSON.parse(s));
  };

  sandbox.dataset_get('52277447f95fb65818000001');

}).call(this);

/*
//@ sourceMappingURL=sandbox.map
*/
