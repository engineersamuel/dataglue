// Generated by CoffeeScript 1.6.2
(function() {
  var dataSetCache, dbLogic, logger, mongodb, pj, prettyjson, sandbox, settings, utils, zlib, _;

  settings = require('../utilitis/settings');

  utils = require('../utilitis/utils');

  logger = require('tracer').colorConsole(utils.logger_config);

  pj = require('prettyjson');

  dataSetCache = require('../db/datasetCache');

  dbLogic = require('../db/dbLogic');

  zlib = require('zlib');

  prettyjson = require('prettyjson');

  mongodb = require('mongodb');

  _ = require('lodash');

  sandbox = {};

  sandbox.hashEach = function() {
    var test;

    test = {
      a: 1,
      b: 2
    };
    return _.each(test, function(value, key) {
      return logger.debug("key: " + key + ", value: " + value);
    });
  };

  sandbox.test_query_dataset = function() {
    var p;

    p = dbLogic.queryDataSet('52277447f95fb65818000001');
    return p.on('dataset', function(dataset) {
      return console.log(dataset);
    });
  };

  sandbox.test_compress = function(input) {
    return zlib.deflate(input, function(err, buffer) {
      logger.info("Compressed: " + buffer);
      return logger.info("Compressed: " + (buffer.toString('base64')));
    });
  };

  sandbox.test_decompress = function(input) {
    var buff;

    buff = new Buffer(input, 'base64');
    logger.info("buff: " + (buff.toString('base64')));
    return zlib.unzip(buff, function(err, results) {
      return logger.info("Decompressed: " + (results.toString()));
    });
  };

  sandbox.refGet = function(_id) {
    logger.debug("Looking up ref with _id: " + _id);
    return dataSetCache.refGet(_id, function(err, doc) {
      return logger.debug(prettyjson.render(result));
    });
  };

  sandbox.dataset_get = function(_id) {
    logger.debug("Looking up data set with _id: " + _id);
    return dataSetCache.refGet(_id, function(err, doc) {
      var p;

      p = dbLogic.loadDataSet(doc);
      return p.on('resultsReady', function(results) {
        logger.debug(typeof results);
        return logger.debug(JSON.stringify(results));
      });
    });
  };

  sandbox.test_parse_string = function() {
    var s;

    s = "52277447f95fb65818000001";
    return logger.info(JSON.parse(s));
  };

  sandbox.test_converting_streams_to_bubble = function() {
    var bubbleData, streams, uniqueXs;

    streams = [
      {
        "key": "id count",
        "values": [
          {
            "x": "ANZ",
            "xType": "varchar",
            "xGroupBy": "field",
            "y": 104,
            "yType": "varchar"
          }, {
            "x": "ASEAN",
            "xType": "varchar",
            "xGroupBy": "field",
            "y": 21,
            "yType": "varchar"
          }, {
            "x": "Brazil",
            "xType": "varchar",
            "xGroupBy": "field",
            "y": 52,
            "yType": "varchar"
          }, {
            "x": "Canada",
            "xType": "varchar",
            "xGroupBy": "field",
            "y": 41,
            "yType": "varchar"
          }, {
            "x": "CE",
            "xType": "varchar",
            "xGroupBy": "field",
            "y": 61,
            "yType": "varchar"
          }, {
            "x": "GCG",
            "xType": "varchar",
            "xGroupBy": "field",
            "y": 69,
            "yType": "varchar"
          }, {
            "x": "India",
            "xType": "varchar",
            "xGroupBy": "field",
            "y": 207,
            "yType": "varchar"
          }, {
            "x": "Japan",
            "xType": "varchar",
            "xGroupBy": "field",
            "y": 65,
            "yType": "varchar"
          }, {
            "x": "Korea",
            "xType": "varchar",
            "xGroupBy": "field",
            "y": 11,
            "yType": "varchar"
          }, {
            "x": "Mexico",
            "xType": "varchar",
            "xGroupBy": "field",
            "y": 3,
            "yType": "varchar"
          }, {
            "x": "NEE",
            "xType": "varchar",
            "xGroupBy": "field",
            "y": 246,
            "yType": "varchar"
          }, {
            "x": "SOLA",
            "xType": "varchar",
            "xGroupBy": "field",
            "y": 31,
            "yType": "varchar"
          }, {
            "x": "SWE",
            "xType": "varchar",
            "xGroupBy": "field",
            "y": 114,
            "yType": "varchar"
          }, {
            "x": "UKI",
            "xType": "varchar",
            "xGroupBy": "field",
            "y": 144,
            "yType": "varchar"
          }, {
            "x": "UNKNOWN",
            "xType": "varchar",
            "xGroupBy": "field",
            "y": 882,
            "yType": "varchar"
          }, {
            "x": "US",
            "xType": "varchar",
            "xGroupBy": "field",
            "y": 1064,
            "yType": "varchar"
          }
        ]
      }
    ];
    bubbleData = _.flatten(_.map(streams, function(stream) {
      return _.map(stream.values, function(item) {
        return item;
      });
    }));
    uniqueXs = _.unique(_.map(bubbleData, function(item) {
      return item.x;
    }));
    logger.info(prettyjson.render(bubbleData));
    return logger.info(prettyjson.render(uniqueXs));
  };

  sandbox.test_openshift_mongo = function(user, pass, host, port, db) {
    var mongourl;

    mongourl = "mongodb://" + user + ":" + pass + "@" + host + ":" + port + "/" + db + "?auto_reconnect=true";
    logger.info("Attempting to connect to: " + mongourl);
    return mongodb.connect(mongourl, function(err, conn) {
      if (err) {
        return logger.error(err);
      } else {
        logger.info("Attempting to connect to collection: " + settings.master_ref.cache);
        return conn.collection(settings.master_ref.cache, function(err, coll) {
          if (err) {
            logger.error(err);
            return conn.close();
          } else {
            return coll.find({}, function(err, results) {
              logger.debug(prettyjson.render(results));
              return conn.close();
            });
          }
        });
      }
    });
  };

  sandbox.test_string_slice = function() {
    var s;

    s = '$SOME_ENV_VAR';
    return logger.info(s.slice(1, s.length));
  };

  sandbox.test_string_slice();

}).call(this);

/*
//@ sourceMappingURL=sandbox.map
*/
