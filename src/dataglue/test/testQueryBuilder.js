// Generated by CoffeeScript 1.6.2
(function() {
  var assert, logger, moment, prettyjson, queryBuilder, should, _;

  queryBuilder = require('../db/queryBuilder');

  assert = require('assert');

  should = require('should');

  _ = require('lodash');

  logger = require('tracer').colorConsole();

  prettyjson = require('prettyjson');

  moment = require('moment');

  describe('queryBuilder', function() {
    var mongoCommonMultiplex, mongoCommonMultiplexProject, simpleMongoDbReference, simpleMysqlDbReference;

    simpleMongoDbReference = {
      "key": "Test⦀some_schema⦀some_table",
      "connection": "Test",
      "schema": "some_schema",
      "table": "some_table",
      "type": "mongo",
      "fields": [
        {
          COLUMN_NAME: "id",
          DATA_TYPE: "varchar"
        }, {
          COLUMN_NAME: "created_date",
          DATA_TYPE: "datetime"
        }
      ]
    };
    simpleMysqlDbReference = {
      "key": "Test⦀some_schema⦀some_table",
      "connection": "Test",
      "schema": "some_schema",
      "table": "some_table",
      "type": "mysql",
      "fields": [
        {
          COLUMN_NAME: "id",
          DATA_TYPE: "varchar"
        }, {
          COLUMN_NAME: "created_date",
          DATA_TYPE: "datetime"
        }
      ],
      "limit": 1000
    };
    mongoCommonMultiplex = {
      '$group': {
        '_id': {
          'x_multiplex': '$x_multiplex'
        },
        'values': {
          '$push': {
            'x': '$x',
            'y': '$y'
          }
        }
      }
    };
    mongoCommonMultiplexProject = {
      '$project': {
        '_id': 0,
        'key': {
          '$concat': ['$_id.x_multiplex']
        },
        'values': 1
      }
    };
    describe('#buildMysqlQuery', function() {
      it('build a simple mysql query', function(done) {
        var expectedSql, ref;

        ref = _.cloneDeep(simpleMysqlDbReference);
        ref.fields[0].aggregation = "count";
        ref.fields[1].groupBy = "month";
        expectedSql = 'SELECT COUNT(id) AS "y", created_date, DATE_FORMAT(created_date, \'%Y-%m\') AS "x" FROM some_schema.some_table GROUP BY x LIMIT 1000';
        return queryBuilder.buildQuery(ref, function(err, output) {
          if (err) {
            return done(err);
          }
          output.query.should.equal(expectedSql);
          return done();
        });
      });
      it('build a simple mysql query id = 1', function(done) {
        var expectedSql, ref;

        ref = _.cloneDeep(simpleMysqlDbReference);
        ref.fields[0].aggregation = "count";
        ref.fields[0].cond = 'equal';
        ref.fields[0].condValue = 1;
        ref.fields[1].groupBy = "month";
        expectedSql = 'SELECT COUNT(id) AS "y", created_date, DATE_FORMAT(created_date, \'%Y-%m\') AS "x" FROM some_schema.some_table WHERE (id = 1) GROUP BY x LIMIT 1000';
        return queryBuilder.buildQuery(ref, function(err, output) {
          if (err) {
            return done(err);
          }
          output.query.should.equal(expectedSql);
          return done();
        });
      });
      it('build a simple mysql query id != 1', function(done) {
        var expectedSql, ref;

        ref = _.cloneDeep(simpleMysqlDbReference);
        ref.fields[0].aggregation = "count";
        ref.fields[0].cond = 'notEqual';
        ref.fields[0].condValue = 1;
        ref.fields[1].groupBy = "month";
        expectedSql = 'SELECT COUNT(id) AS "y", created_date, DATE_FORMAT(created_date, \'%Y-%m\') AS "x" FROM some_schema.some_table WHERE (id != 1) GROUP BY x LIMIT 1000';
        return queryBuilder.buildQuery(ref, function(err, output) {
          if (err) {
            return done(err);
          }
          output.query.should.equal(expectedSql);
          return done();
        });
      });
      it('build a simple mysql query id > 1', function(done) {
        var expectedSql, ref;

        ref = _.cloneDeep(simpleMysqlDbReference);
        ref.fields[0].aggregation = "count";
        ref.fields[0].cond = 'gt';
        ref.fields[0].condValue = 1;
        ref.fields[1].groupBy = "month";
        expectedSql = 'SELECT COUNT(id) AS "y", created_date, DATE_FORMAT(created_date, \'%Y-%m\') AS "x" FROM some_schema.some_table WHERE (id > 1) GROUP BY x LIMIT 1000';
        return queryBuilder.buildQuery(ref, function(err, output) {
          if (err) {
            return done(err);
          }
          output.query.should.equal(expectedSql);
          return done();
        });
      });
      return it('build a simple multiplexed mysql query', function(done) {
        var expectedSql, ref;

        ref = _.cloneDeep(simpleMysqlDbReference);
        ref.fields[0].aggregation = "count";
        ref.fields.push({
          COLUMN_NAME: "geo",
          DATA_TYPE: "varchar",
          groupBy: 'multiplex'
        });
        expectedSql = 'SELECT COUNT(id) AS "y", created_date, geo, geo AS "x_multiplex" FROM some_schema.some_table GROUP BY x_multiplex LIMIT 1000';
        return queryBuilder.buildQuery(ref, function(err, output) {
          if (err) {
            return done(err);
          }
          output.query.should.equal(expectedSql);
          return done();
        });
      });
    });
    return describe('#buildMongoQuery', function() {
      it('test deep equals', function() {
        var x, y;

        x = [
          {
            "$match": {
              "created_date": {
                "$ne": null
              }
            }
          }, {
            "$group": {
              "_id": {
                "year": {
                  "$year": "$created_date"
                }
              }
            }
          }, {
            "$project": {
              "_id": 0,
              "x": "$_id.year"
            }
          }
        ];
        y = [
          {
            '$match': {
              "created_date": {
                "$ne": null
              }
            }
          }, {
            '$group': {
              "_id": {
                "year": {
                  "$year": "$created_date"
                }
              }
            }
          }, {
            "$project": {
              "_id": 0,
              "x": "$_id.year"
            }
          }
        ];
        return x.should.eql(y);
      });
      it('build a simple mongo group by year query', function(done) {
        var expectedQuery, ref;

        ref = _.cloneDeep(simpleMongoDbReference);
        ref.fields[1].groupBy = "year";
        expectedQuery = [
          {
            '$match': {
              "created_date": {
                "$exists": true,
                "$ne": null
              }
            }
          }, {
            '$group': {
              "_id": {
                "year": {
                  "$year": "$created_date"
                }
              }
            }
          }, {
            "$project": {
              "_id": 0,
              "x": "$_id.year"
            }
          }
        ];
        return queryBuilder.buildQuery(ref, function(err, output) {
          if (err) {
            return done(err);
          }
          output.query.should.eql(expectedQuery);
          return done();
        });
      });
      it('build a simple mongo group by month query', function(done) {
        var expectedQuery, ref;

        ref = _.cloneDeep(simpleMongoDbReference);
        ref.fields[1].groupBy = "month";
        expectedQuery = [
          {
            '$match': {
              "created_date": {
                "$exists": true,
                "$ne": null
              }
            }
          }, {
            '$group': {
              "_id": {
                "year": {
                  "$year": "$created_date"
                },
                "month": {
                  "$month": "$created_date"
                }
              }
            }
          }, {
            "$project": {
              "_id": 0,
              "x": {
                "$concat": ["$_id.year", "-", "$_id.month"]
              }
            }
          }
        ];
        return queryBuilder.buildQuery(ref, function(err, output) {
          if (err) {
            return done(err);
          }
          output.query.should.eql(expectedQuery);
          return done();
        });
      });
      it('build a simple mongo group by day query', function(done) {
        var expectedQuery, ref;

        ref = _.cloneDeep(simpleMongoDbReference);
        ref.fields[1].groupBy = "day";
        expectedQuery = [
          {
            '$match': {
              "created_date": {
                "$exists": true,
                "$ne": null
              }
            }
          }, {
            '$group': {
              "_id": {
                "year": {
                  "$year": "$created_date"
                },
                "month": {
                  "$month": "$created_date"
                },
                "day": {
                  "$dayOfMonth": "$created_date"
                }
              }
            }
          }, {
            "$project": {
              "_id": 0,
              "x": {
                "$concat": ["$_id.year", "-", "$_id.month", "-", "$_id.day"]
              }
            }
          }
        ];
        return queryBuilder.buildQuery(ref, function(err, output) {
          if (err) {
            return done(err);
          }
          output.query.should.eql(expectedQuery);
          return done();
        });
      });
      it('build a simple mongo group by hour query', function(done) {
        var expectedQuery, ref;

        ref = _.cloneDeep(simpleMongoDbReference);
        ref.fields[1].groupBy = "hour";
        expectedQuery = [
          {
            '$match': {
              "created_date": {
                "$exists": true,
                "$ne": null
              }
            }
          }, {
            '$group': {
              "_id": {
                "year": {
                  "$year": "$created_date"
                },
                "month": {
                  "$month": "$created_date"
                },
                "day": {
                  "$dayOfMonth": "$created_date"
                },
                "hour": {
                  "$hour": "$created_date"
                }
              }
            }
          }, {
            "$project": {
              "_id": 0,
              "x": {
                "$concat": ["$_id.year", "-", "$_id.month", "-", "$_id.day", "-", "$_id.hour"]
              }
            }
          }
        ];
        return queryBuilder.buildQuery(ref, function(err, output) {
          if (err) {
            return done(err);
          }
          output.query.should.eql(expectedQuery);
          return done();
        });
      });
      it('mongo group by field limit 500', function(done) {
        var expectedQuery, ref;

        ref = _.cloneDeep(simpleMongoDbReference);
        ref.fields.push({
          COLUMN_NAME: "geo",
          DATA_TYPE: "varchar",
          groupBy: 'field'
        });
        ref.limit = 500;
        expectedQuery = [
          {
            '$match': {
              "geo": {
                "$exists": true
              }
            }
          }, {
            '$group': {
              "_id": {
                "x": "$geo"
              }
            }
          }, {
            "$project": {
              "_id": 0,
              "x": "$_id.x"
            }
          }, {
            '$limit': 500
          }
        ];
        return queryBuilder.buildQuery(ref, function(err, output) {
          if (err) {
            return done(err);
          }
          output.query.should.eql(expectedQuery);
          return done();
        });
      });
      it('mongo count by field', function(done) {
        var expectedQuery, ref;

        ref = _.cloneDeep(simpleMongoDbReference);
        ref.fields[0].aggregation = 'count';
        ref.fields.push({
          COLUMN_NAME: "geo",
          DATA_TYPE: "varchar",
          groupBy: 'field'
        });
        expectedQuery = [
          {
            '$match': {
              "geo": {
                "$exists": true
              }
            }
          }, {
            '$group': {
              "_id": {
                "x": "$geo"
              },
              "count": {
                "$sum": 1
              }
            }
          }, {
            "$project": {
              "_id": 0,
              "x": "$_id.x",
              "y": "$count"
            }
          }
        ];
        return queryBuilder.buildQuery(ref, function(err, output) {
          if (err) {
            return done(err);
          }
          output.query.should.eql(expectedQuery);
          return done();
        });
      });
      it('mongo count by month', function(done) {
        var expectedQuery, ref;

        ref = _.cloneDeep(simpleMongoDbReference);
        ref.fields[0].aggregation = "count";
        ref.fields[1].groupBy = "month";
        expectedQuery = [
          {
            "$match": {
              "created_date": {
                "$exists": true,
                "$ne": null
              }
            }
          }, {
            "$group": {
              "_id": {
                "year": {
                  "$year": "$created_date"
                },
                "month": {
                  "$month": "$created_date"
                }
              },
              "count": {
                "$sum": 1
              }
            }
          }, {
            "$project": {
              "_id": 0,
              "x": {
                "$concat": ["$_id.year", "-", "$_id.month"]
              },
              "y": "$count"
            }
          }
        ];
        return queryBuilder.buildQuery(ref, function(err, output) {
          if (err) {
            return done(err);
          }
          output.query.should.eql(expectedQuery);
          return done();
        });
      });
      it('mongo count by month multiplex by geo field', function(done) {
        var expectedQuery, ref;

        ref = _.cloneDeep(simpleMongoDbReference);
        ref.fields[0].aggregation = 'count';
        ref.fields[1].groupBy = 'month';
        ref.fields.push({
          COLUMN_NAME: "geo",
          DATA_TYPE: "varchar",
          groupBy: 'multiplex'
        });
        expectedQuery = [
          {
            '$match': {
              "created_date": {
                "$exists": true,
                "$ne": null
              },
              "geo": {
                "$exists": true
              }
            }
          }, {
            '$group': {
              "_id": {
                "year": {
                  "$year": "$created_date"
                },
                "month": {
                  "$month": "$created_date"
                },
                "x_multiplex": "$geo"
              },
              "count": {
                "$sum": 1
              }
            }
          }, {
            "$project": {
              "_id": 0,
              "y": "$count",
              "x": {
                "$concat": ["$_id.year", "-", "$_id.month"]
              },
              "x_multiplex": "$_id.x_multiplex"
            }
          }
        ];
        return queryBuilder.buildQuery(ref, function(err, output) {
          if (err) {
            return done(err);
          }
          output.query.should.eql(expectedQuery);
          return done();
        });
      });
      return it('group by month between 2013-09-01 and 2013-10-01', function(done) {
        var expectedQuery, ref;

        ref = _.cloneDeep(simpleMongoDbReference);
        ref.fields[1].groupBy = "month";
        ref.fields[1].beginValue = "2013-09-01";
        ref.fields[1].endValue = "2013-10-01";
        expectedQuery = [
          {
            '$match': {
              "created_date": {
                "$gt": moment.utc("2013-09-01").toDate(),
                "$lte": moment.utc("2013-10-01").toDate(),
                "$exists": true,
                "$ne": null
              }
            }
          }, {
            '$group': {
              "_id": {
                "year": {
                  "$year": "$created_date"
                },
                "month": {
                  "$month": "$created_date"
                }
              }
            }
          }, {
            "$project": {
              "_id": 0,
              "x": {
                "$concat": ["$_id.year", "-", "$_id.month"]
              }
            }
          }
        ];
        return queryBuilder.buildQuery(ref, function(err, output) {
          if (err) {
            return done(err);
          }
          output.query.should.eql(expectedQuery);
          return done();
        });
      });
    });
  });

}).call(this);

/*
//@ sourceMappingURL=testQueryBuilder.map
*/
