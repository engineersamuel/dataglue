// Generated by CoffeeScript 1.6.2
(function() {
  var assert, logger, prettyjson, queryBuilder, should, _;

  queryBuilder = require('../db/queryBuilder');

  assert = require('assert');

  should = require('should');

  _ = require('lodash');

  logger = require('tracer').colorConsole();

  prettyjson = require('prettyjson');

  describe('queryBuilder', function() {
    var simpleMongoDbReference, simpleMysqlDbReference;

    simpleMongoDbReference = {
      "key": "Test⦀some_schema⦀some_table",
      "connection": "Test",
      "schema": "some_schema",
      "table": "some_table",
      "type": "mongo",
      "fields": [
        {
          COLUMN_NAME: "id",
          DATA_TYPE: "varchar"
        }, {
          COLUMN_NAME: "created_date",
          DATA_TYPE: "datetime"
        }
      ]
    };
    simpleMysqlDbReference = {
      "key": "Test⦀some_schema⦀some_table",
      "connection": "Test",
      "schema": "some_schema",
      "table": "some_table",
      "type": "mysql",
      "fields": [
        {
          COLUMN_NAME: "id",
          DATA_TYPE: "varchar"
        }, {
          COLUMN_NAME: "created_date",
          DATA_TYPE: "datetime"
        }
      ],
      "limit": 1000
    };
    describe('#buildMysqlQuery', function() {
      it('build a simple mysql query', function(done) {
        var expectedSql, ref;

        ref = _.cloneDeep(simpleMysqlDbReference);
        ref.fields[0].aggregation = "count";
        ref.fields[1].groupBy = "month";
        expectedSql = 'SELECT COUNT(id) AS "y", created_date, DATE_FORMAT(created_date, \'%Y-%m\') AS "x" FROM some_schema.some_table GROUP BY x LIMIT 1000';
        return queryBuilder.buildQuery(ref, function(err, output) {
          if (err) {
            return done(err);
          }
          output.query.should.equal(expectedSql);
          return done();
        });
      });
      return it('build a simple multiplexed mysql query', function(done) {
        var expectedSql, ref;

        ref = _.cloneDeep(simpleMysqlDbReference);
        ref.fields[0].aggregation = "count";
        ref.fields.push({
          COLUMN_NAME: "geo",
          DATA_TYPE: "varchar",
          groupBy: 'multiplex'
        });
        expectedSql = 'SELECT COUNT(id) AS "y", created_date, geo, geo AS "x_multiplex" FROM some_schema.some_table GROUP BY x_multiplex LIMIT 1000';
        return queryBuilder.buildQuery(ref, function(err, output) {
          if (err) {
            return done(err);
          }
          output.query.should.equal(expectedSql);
          return done();
        });
      });
    });
    return describe('#buildMongoQuery', function() {
      it('build a simple mongo group by year query', function(done) {
        var expectedQuery, ref;

        ref = _.cloneDeep(simpleMongoDbReference);
        ref.fields[1].groupBy = "year";
        expectedQuery = [
          {
            '$match': {
              "created_date": {
                "$exists": true
              }
            }
          }, {
            '$group': {
              "_id": {
                "year": {
                  "$year": "$created_date"
                }
              }
            }
          }
        ];
        return queryBuilder.buildQuery(ref, function(err, output) {
          if (err) {
            return done(err);
          }
          output.query.should.eql(expectedQuery);
          return done();
        });
      });
      it('build a simple mongo group by month query', function(done) {
        var expectedQuery, ref;

        ref = _.cloneDeep(simpleMongoDbReference);
        ref.fields[1].groupBy = "month";
        expectedQuery = [
          {
            '$match': {
              "created_date": {
                "$exists": true
              }
            }
          }, {
            '$group': {
              "_id": {
                "year": {
                  "$year": "$created_date"
                },
                "month": {
                  "$month": "$created_date"
                }
              }
            }
          }
        ];
        return queryBuilder.buildQuery(ref, function(err, output) {
          if (err) {
            return done(err);
          }
          output.query.should.eql(expectedQuery);
          return done();
        });
      });
      it('build a simple mongo group by day query', function(done) {
        var expectedQuery, ref;

        ref = _.cloneDeep(simpleMongoDbReference);
        ref.fields[1].groupBy = "day";
        expectedQuery = [
          {
            '$match': {
              "created_date": {
                "$exists": true
              }
            }
          }, {
            '$group': {
              "_id": {
                "year": {
                  "$year": "$created_date"
                },
                "month": {
                  "$month": "$created_date"
                },
                "day": {
                  "$dayOfMonth": "$created_date"
                }
              }
            }
          }
        ];
        return queryBuilder.buildQuery(ref, function(err, output) {
          if (err) {
            return done(err);
          }
          output.query.should.eql(expectedQuery);
          return done();
        });
      });
      it('build a simple mongo group by hour query', function(done) {
        var expectedQuery, ref;

        ref = _.cloneDeep(simpleMongoDbReference);
        ref.fields[1].groupBy = "hour";
        expectedQuery = [
          {
            '$match': {
              "created_date": {
                "$exists": true
              }
            }
          }, {
            '$group': {
              "_id": {
                "year": {
                  "$year": "$created_date"
                },
                "month": {
                  "$month": "$created_date"
                },
                "day": {
                  "$dayOfMonth": "$created_date"
                },
                "hour": {
                  "$hour": "$created_date"
                }
              }
            }
          }
        ];
        return queryBuilder.buildQuery(ref, function(err, output) {
          if (err) {
            return done(err);
          }
          output.query.should.eql(expectedQuery);
          return done();
        });
      });
      it('mongo group by field limit 500', function(done) {
        var expectedQuery, ref;

        ref = _.cloneDeep(simpleMongoDbReference);
        ref.fields.push({
          COLUMN_NAME: "geo",
          DATA_TYPE: "varchar",
          groupBy: 'field'
        });
        ref.limit = 500;
        expectedQuery = [
          {
            '$match': {
              "geo": {
                "$exists": true
              }
            }
          }, {
            '$group': {
              "_id": "$geo"
            }
          }, {
            '$limit': 500
          }
        ];
        return queryBuilder.buildQuery(ref, function(err, output) {
          if (err) {
            return done(err);
          }
          output.query.should.eql(expectedQuery);
          return done();
        });
      });
      it('mongo count by field', function(done) {
        var expectedQuery, ref;

        ref = _.cloneDeep(simpleMongoDbReference);
        ref.fields[0].aggregation = 'count';
        ref.fields.push({
          COLUMN_NAME: "geo",
          DATA_TYPE: "varchar",
          groupBy: 'field'
        });
        expectedQuery = [
          {
            '$match': {
              "geo": {
                "$exists": true
              }
            }
          }, {
            '$group': {
              "_id": "$geo",
              "count": {
                "$sum": 1
              }
            }
          }
        ];
        return queryBuilder.buildQuery(ref, function(err, output) {
          if (err) {
            return done(err);
          }
          output.query.should.eql(expectedQuery);
          return done();
        });
      });
      return it('mongo count by month', function(done) {
        var expectedQuery, ref;

        ref = _.cloneDeep(simpleMongoDbReference);
        ref.fields[0].aggregation = 'count';
        ref.fields[1].groupBy = "month";
        expectedQuery = [
          {
            '$match': {
              "created_date": {
                "$exists": true
              }
            }
          }, {
            '$group': {
              "_id": {
                "year": {
                  "$year": "$created_date"
                },
                "month": {
                  "$month": "$created_date"
                }
              },
              "count": {
                "$sum": 1
              }
            }
          }
        ];
        return queryBuilder.buildQuery(ref, function(err, output) {
          if (err) {
            return done(err);
          }
          logger.debug(JSON.stringify(output));
          output.query.should.eql(expectedQuery);
          return done();
        });
      });
    });
  });

}).call(this);

/*
//@ sourceMappingURL=testQueryBuilder.map
*/
