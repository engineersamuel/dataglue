// Generated by CoffeeScript 1.6.2
(function() {
  define(["angular", "services", "d3", "nv"], function(angular, services, d3, nv) {
    "use strict";    return angular.module("dataGlue.directives", ["dataGlue.services"]).directive("appVersion", [
      "version", function(version) {
        return function(scope, elm, attrs) {
          return elm.text(version);
        };
      }
    ]).directive("dirTableVis", function() {
      return {
        restrict: "E",
        scope: {
          val: "=",
          grouped: "="
        },
        link: function(scope, element, attrs) {
          var tables;

          tables = function(data) {
            var divs, vis;

            console.log("tables:data: " + (JSON.stringify(data)));
            vis = d3.select(element[0]);
            divs = vis.selectAll("div").data(data, function(d) {
              return d['TABLE_NAME'];
            });
            divs.enter().append('div').attr('class', 'db-info-item').text(function(d) {
              return d['TABLE_NAME'];
            });
            divs.exit().transition().duration(300).ease("exp").style("opacity", 0).remove();
            return divs.attr("opacity", 1).transition().duration(500).ease("exp");
          };
          return scope.$watch('val', function(newVal, oldVal) {
            if (newVal === void 0) {
              return;
            }
            return tables(newVal);
          });
        }
      };
    }).directive("d3Visualization", function() {
      return {
        restrict: "E",
        scope: {
          val: "="
        },
        link: function(scope, element, attrs) {
          var chart, exampleData, handleChart, stream_index, stream_layers;

          stream_index = 
        function (d, i) {
          return {x: i, y: Math.max(0, d)};
        };
          stream_layers = 
        function (n, m, o) {
          if (arguments.length < 3) o = 0;
          function bump(a) {
            var x = 1 / (.1 + Math.random()),
              y = 2 * Math.random() - .5,
              z = 10 / (.1 + Math.random());
            for (var i = 0; i < m; i++) {
              var w = (i / m - y) * z;
              a[i] += x * Math.exp(-w * w);
            }
          }
          return d3.range(n).map(function() {
            var a = [], i;
              for (i = 0; i < m; i++) a[i] = o + o * Math.random();
              for (i = 0; i < 5; i++) bump(a);
            return a.map(stream_index);
          });
        };
          exampleData = function() {
            return stream_layers(3, 10 + Math.random() * 100, .1).map(function(data, i) {
              return {
                key: 'Stream' + i,
                values: data
              };
            });
          };
          chart = void 0;
          handleChart = function(dataSet) {
            if (chart == null) {
              return nv.addGraph(function() {
                var data;

                chart = nv.models.multiBarChart().margin({
                  top: 10,
                  right: 30,
                  bottom: 150,
                  left: 10
                }).x(function(d) {
                  return d.x;
                }).y(function(d) {
                  return d.y;
                });
                chart.xAxis.tickFormat(function(d) {
                  return moment(d).format('YYYY-MM-DD');
                });
                chart.yAxis.tickFormat(function(d) {
                  return d3.format("d")(d);
                });
                chart.yAxis.tickFormat(d3.format("d"));
                data = dataSet == null ? exampleData() : dataSet;
                d3.select("#graph_container svg").datum(data).transition().duration(500).call(chart);
                nv.utils.windowResize(chart.update);
                return chart;
              });
            } else {
              return d3.select("#graph_container svg").datum(dataSet).transition().duration(500).call(chart);
            }
          };
          return scope.$watch("val", function(newVal, oldVal) {
            return handleChart(newVal);
          });
        }
      };
    });
  });

}).call(this);
