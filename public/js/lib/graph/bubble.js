// Generated by CoffeeScript 1.6.2
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['underscore', 'd3', 'customTooltip'], function(_, d3, CustomTooltip) {
    var DataGlueBubbleChart;

    return DataGlueBubbleChart = (function() {
      function DataGlueBubbleChart(container_id) {
        this.hide_details = __bind(this.hide_details, this);
        this.show_details = __bind(this.show_details, this);
        this.hide_groups = __bind(this.hide_groups, this);
        this.move_towards_center = __bind(this.move_towards_center, this);
        this.display_group_all = __bind(this.display_group_all, this);
        this.start = __bind(this.start, this);        console.log("D3 Bubble Chart Created!");
        this.container_selector = "#" + container_id;
        this.svg_selector = "#" + container_id + " svg";
        this.width = $(this.container_selector).parent().width();
        this.height = $(this.container_selector).parent().height();
        console.log("Height: " + this.height + ", width: " + this.width);
        this.display_type = "all";
        this.tooltip = CustomTooltip("gates_tooltip", 240);
        this.center = {
          x: this.width / 2,
          y: this.height / 2
        };
        this.layout_gravity = -0.01;
        this.damper = 0.1;
      }

      DataGlueBubbleChart.prototype.initialize_data = function(streams) {
        var max_amount, uniqueXs;

        console.log("bubble:initialize_data");
        this.vis = null;
        this.nodes = [];
        this.force = null;
        this.circles = null;
        this.data = _.flatten(_.map(streams, function(stream) {
          return _.map(stream.values, function(item) {
            return item;
          });
        }));
        uniqueXs = _.unique(_.map(this.data, function(item) {
          return item.x;
        }));
        this.fill_color_x = d3.scale.ordinal().domain(uniqueXs).range(d3.range(uniqueXs.length).map(d3.scale.linear().domain([0, uniqueXs.length - 1]).range(["yellow", "green"]).interpolate(d3.interpolateLab)));
        max_amount = d3.max(this.data, function(d) {
          return parseInt(d.y);
        });
        this.radius_scale = d3.scale.pow().exponent(0.5).domain([0, max_amount]).range([2, 85]);
        this.create_nodes();
        return this.create_vis();
      };

      DataGlueBubbleChart.prototype.create_nodes = function() {
        var _this = this;

        this.data.forEach(function(d) {
          var node;

          node = {
            radius: _this.radius_scale(parseInt(d.y || 0)),
            y: d.y,
            x: d.x,
            name: d.x,
            value: d.y
          };
          return _this.nodes.push(node);
        });
        return this.nodes.sort(function(a, b) {
          return b.y - a.y;
        });
      };

      DataGlueBubbleChart.prototype.create_vis = function() {
        var that,
          _this = this;

        d3.selectAll(this.svg_selector).remove();
        this.vis = d3.select(this.container_selector).append("svg").attr("width", this.width).attr("height", this.height);
        this.circles = this.vis.selectAll("circle").data(this.nodes, function(d) {
          return d.x;
        });
        that = this;
        this.circles.enter().append("circle").attr("r", 0).attr("fill", function(d) {
          return _this.fill_color_x(d.x);
        }).attr("stroke-width", 1).attr("stroke", function(d) {
          return d3.rgb(_this.fill_color_x(d.x)).darker();
        }).attr("id", function(d) {
          return "bubble_" + d.x;
        }).on("mouseover", function(d, i) {
          return that.show_details(d, i, this);
        }).on("mouseout", function(d, i) {
          return that.hide_details(d, i, this);
        }).on("click", function(d, i) {
          return that.open_article(d, i, this);
        });
        return this.circles.transition().duration(2000).attr("r", function(d) {
          return d.radius;
        });
      };

      DataGlueBubbleChart.prototype.charge = function(d) {
        return -Math.pow(d.radius, 2.0) / 8;
      };

      DataGlueBubbleChart.prototype.start = function() {
        return this.force = d3.layout.force().nodes(this.nodes).size([this.width, this.height]);
      };

      DataGlueBubbleChart.prototype.display_group_all = function() {
        var _this = this;

        this.force.gravity(this.layout_gravity).charge(this.charge).friction(0.9).on("tick", function(e) {
          return _this.circles.each(_this.move_towards_center(e.alpha)).attr("cx", function(d) {
            return d.x;
          }).attr("cy", function(d) {
            return d.y;
          });
        });
        this.force.start();
        return this.hide_groups();
      };

      DataGlueBubbleChart.prototype.move_towards_center = function(alpha) {
        var _this = this;

        return function(d) {
          d.x = d.x + (_this.center.x - d.x) * (_this.damper + 0.02) * alpha;
          return d.y = d.y + (_this.center.y - d.y) * (_this.damper + 0.02) * alpha;
        };
      };

      DataGlueBubbleChart.prototype.hide_groups = function() {
        var groups;

        return groups = this.vis.selectAll(".groups").remove();
      };

      DataGlueBubbleChart.prototype.show_details = function(data, i, element) {
        var content;

        d3.select(element).attr("stroke", "black");
        content = "<span class=\"name\">Name: </span><span class=\"value\">" + data.name + "</span><br/>";
        content += "<span class=\"name\">Value: </span><span class=\"value\">" + data.value + "</span><br/>";
        return this.tooltip.showTooltip(content, d3.event);
      };

      DataGlueBubbleChart.prototype.hide_details = function(data, i, element) {
        var _this = this;

        d3.select(element).attr("stroke", function(d) {
          return d3.rgb(_this.fill_color_x(d.x)).darker();
        });
        return this.tooltip.hideTooltip();
      };

      return DataGlueBubbleChart;

    })();
  });

}).call(this);

/*
//@ sourceMappingURL=bubble.map
*/
