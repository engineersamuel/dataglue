// Generated by CoffeeScript 1.6.2
(function() {
  define(['jquery', 'underscore', 'moment'], function($, _, moment) {
    return [
      '$scope', '$location', '$routeParams', '$timeout', 'dbService', function($scope, $location, $routeParams, $timeout, dbService) {
        var getSelectedFieldIndex;

        $scope._id = $routeParams['_id'];
        if ($routeParams['_id'] != null) {
          dbService.cacheGet($routeParams['_id'], function(data) {
            dbService.dataSet = data;
            return $scope.dataSet = dbService.dataSet;
          });
        } else {
          $scope.dataSet = dbService.dataSet;
        }
        getSelectedFieldIndex = function() {
          var fieldIndex;

          fieldIndex = _.findIndex(dbService.dataSet.dbReferences[$scope.selectedReference.key].fields, function(item) {
            if (item['COLUMN_NAME'] != null) {
              return item['COLUMN_NAME'] === $scope.selectedFieldName;
            } else {
              return item === $scope.selectedFieldName;
            }
          });
          return fieldIndex;
        };
        $scope.updateField = function(variableNames) {
          var fieldIndex;

          fieldIndex = getSelectedFieldIndex();
          _.each(variableNames, function(variableName) {
            return dbService.dataSet.dbReferences[$scope.selectedReference.key].fields[fieldIndex][variableName] = $scope[variableName];
          });
          return $scope.dataSet = dbService.dataSet;
        };
        $scope.d3DataSet = void 0;
        $scope.$watch('dataSet', function() {
          var dbData, tmp;

          tmp = {};
          return dbData = dbService.queryDataSet(function(data) {
            var example, tmpD3DataSet;

            console.log("dataSet: " + data.length + " rows");
            _.each(_.keys(data), function(key) {
              console.log("Looping on key: " + key);
              tmp[key] = {
                rawValues: void 0
              };
              if (tmp[key]['d3'] == null) {
                tmp[key]['d3'] = {};
              }
              _.each(dbService.dataSet.dbReferences[key].fields, function(field) {
                var groupedRows;

                console.log("Looping on field: " + (JSON.stringify(field)));
                if (tmp[key]['field'] == null) {
                  tmp[key]['field'] = field;
                }
                if ((field['groupBy'] != null) && field['groupBy'] !== "") {
                  groupedRows = void 0;
                  console.log("Grouping by " + field.groupBy);
                  if (field.groupBy === 'year') {
                    groupedRows = _.groupBy(data[key], function(row) {
                      var fieldValue;

                      fieldValue = row[field['COLUMN_NAME']];
                      return moment(fieldValue).format('YYYY');
                    });
                  } else if (field['groupBy'] === 'month') {
                    groupedRows = _.groupBy(data[key], function(row) {
                      var fieldValue;

                      fieldValue = row[field['COLUMN_NAME']];
                      return moment(fieldValue).format('YYYY-MM');
                    });
                  } else if (field['groupBy'] === 'day') {
                    groupedRows = _.groupBy(data[key], function(row) {
                      var fieldValue;

                      fieldValue = row[field['COLUMN_NAME']];
                      return moment(fieldValue).format('YYYY-MM-DD');
                    });
                  }
                  return tmp[key].rawValues = groupedRows;
                }
              });
              return _.each(dbService.dataSet.dbReferences[key].fields, function(field) {
                console.log("Looping on field: " + (JSON.stringify(field)));
                if ((field['aggregation'] != null) && field['aggregation'] !== "") {
                  if (field['aggregation'] === 'count') {
                    console.log("Aggregating by " + field['aggregation'] + " on field: " + (JSON.stringify(field)));
                    if (tmp[key] == null) {
                      return console.error("No tmp[" + key + "] found, tmp: " + (JSON.stringify(tmp)));
                    } else if (tmp[key].rawValues == null) {
                      return console.error("No rawValues found for key: " + key + ", tmp[key]: " + (JSON.stringify(tmp[key])));
                    } else if (!_.isArray(tmp[key].rawValues)) {
                      return _.each(_.keys(tmp[key].rawValues), function(group) {
                        var theCount;

                        theCount = _.countBy(tmp[key].rawValues[group], function(row) {
                          if (_.has(row, field['COLUMN_NAME'])) {
                            return field['COLUMN_NAME'];
                          } else {
                            return void 0;
                          }
                        });
                        theCount = theCount[field['COLUMN_NAME']];
                        console.log("The count of group: " + group + " is " + theCount);
                        if (tmp[key]['d3'][group] == null) {
                          tmp[key]['d3'][group] = {};
                        }
                        return tmp[key]['d3'][group]['count'] = theCount;
                      });
                    } else if (_.isArray(tmp.rawValues)) {
                      return console.warn("Not yet Implemented!");
                    }
                  }
                }
              });
            });
            example = [
              {
                "key": "Stream0",
                "values": [
                  {
                    "x": 0,
                    "y": 0.21822935637400104
                  }, {
                    "x": 1,
                    "y": 0.9060637492616568
                  }, {
                    "x": 2,
                    "y": 4.546998750065884
                  }
                ]
              }, {
                "key": "Stream1",
                "values": [
                  {
                    "x": 0,
                    "y": 0.12126328994207859
                  }, {
                    "x": 1,
                    "y": 0.13279333392038253
                  }, {
                    "x": 2,
                    "y": 0.5631966101277897
                  }
                ]
              }
            ];
            tmpD3DataSet = [];
            _.each(_.keys(tmp), function(dbReference) {
              var stack;

              stack = {
                key: tmp[dbReference]['field']['COLUMN_NAME'],
                values: []
              };
              _.each(_.keys(tmp[dbReference]['d3']), function(groupedKey) {
                return stack['values'].push({
                  x: groupedKey,
                  y: tmp[dbReference]['d3'][groupedKey]['count'],
                  f: tmp[dbReference]['field']
                });
              });
              return tmpD3DataSet.push(stack);
            });
            $scope.d3DataSet = tmpD3DataSet;
            console.log(tmp);
            return console.log($scope.d3DataSet);
          });
        });
        $scope.aggregation = void 0;
        $scope.aggregationOptions = [
          {
            name: 'aggregation',
            value: void 0,
            label: 'No Selection'
          }, {
            name: 'aggregation',
            value: 'count',
            label: 'Count'
          }, {
            name: 'aggregation',
            value: 'distinctCount',
            label: 'Distinct Count'
          }, {
            name: 'aggregation',
            value: 'sum',
            label: 'Sum'
          }, {
            name: 'aggregation',
            value: 'avg',
            label: 'Avg'
          }, {
            name: 'aggregation',
            value: 'median',
            label: 'Median'
          }
        ];
        $scope.groupBy = void 0;
        $scope.groupByOptions = [
          {
            name: 'groupFieldBy',
            value: void 0,
            label: 'No Selection'
          }, {
            name: 'groupFieldBy',
            value: 'field',
            label: 'Field Itself'
          }, {
            name: 'groupFieldBy',
            value: 'year',
            label: 'Year'
          }, {
            name: 'groupFieldBy',
            value: 'quarter',
            label: 'Quarter'
          }, {
            name: 'groupFieldBy',
            value: 'month',
            label: 'Month'
          }, {
            name: 'groupFieldBy',
            value: 'day',
            label: 'Day'
          }
        ];
        $scope.selectedReference = void 0;
        $scope.selectedField = void 0;
        $scope.selectedFieldName = void 0;
        $scope.openModalForField = function(r, f) {
          $scope.selectedReference = r;
          $scope.selectedField = f;
          $scope.selectedFieldName = f['COLUMN_NAME'] != null ? f['COLUMN_NAME'] : f;
          $scope.aggregation = f['aggregation'];
          $scope.groupBy = f['groupBy'];
          $scope.beginDate = f['beginDate'];
          $scope.endDate = f['endDate'];
          return $('#graph_field_modal').modal();
        };
        $scope.updateDataSet = function() {
          var variablesToUpdate;

          variablesToUpdate = ['aggregation', 'groupBy', 'beginDate', 'endDate'];
          $scope.updateField(variablesToUpdate);
          return dbService.cacheUpsert(function() {
            return void 0;
          });
        };
        $scope.beginDate = void 0;
        $scope.endDate = void 0;
        $scope.beginDateOpened = false;
        $scope.endDateOpened = false;
        $scope.dateOptions = {
          'year-format': "'yyyy'",
          'starting-day': 1
        };
        $scope.today = function() {
          return $scope.dt = new Date();
        };
        $scope.clearBeginDate = function() {
          return $scope.beginDate = void 0;
        };
        $scope.clearEndDate = function() {
          return $scope.endDate = void 0;
        };
        $scope.openBeginDate = function() {
          return $timeout(function() {
            return $scope.beginDateOpened = true;
          });
        };
        $scope.openEndDate = function() {
          return $timeout(function() {
            return $scope.endDateOpened = true;
          });
        };
        $scope.testGraph = function() {
          dbService.queryDb($scope.connection, $scope.schema, $scope.table, $scope.fields, function(data) {
            return console.log(data);
          });
          return console.log("Test graph " + (JSON.stringify($scope.fields)));
        };
        return $scope.$apply();
      }
    ];
  });

}).call(this);
