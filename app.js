// Generated by CoffeeScript 1.6.3
(function() {
  var app, dataSetCache, dbInfo, dbLogic, express, http, ipAddress, logger, path, port, prettyjson, settings, utils, _;

  express = require('express');

  http = require('http');

  path = require('path');

  utils = require('./src/dataglue/utilitis/utils');

  logger = require('tracer').colorConsole(utils.logger_config);

  settings = require('./src/dataglue/utilitis/settings');

  utils = require('./src/dataglue/utilitis/utils');

  dataSetCache = require('./src/dataglue/db/datasetCache');

  dbLogic = require('./src/dataglue/db/dbLogic');

  dbInfo = require('./src/dataglue/db/dbInfo');

  prettyjson = require('prettyjson');

  _ = require('lodash');

  port = process.env['OPENSHIFT_INTERNAL_PORT'] || process.env['OPENSHIFT_NODEJS_PORT'] || 3000;

  ipAddress = process.env['OPENSHIFT_NODEJS_IP'] || '127.0.0.1';

  app = express();

  app.configure(function() {
    app.set('ipAddress', ipAddress);
    app.set('port', port);
    app.set('views', __dirname + '/public');
    app.set('view engine', 'jade');
    app.engine('jade', require('jade').__express);
    app.use(express.favicon());
    app.use(express.logger());
    app.use(express.compress());
    app.use(express.methodOverride());
    app.use(express.bodyParser());
    app.use(app.router);
    app.use(express["static"](path.join(__dirname, 'public')));
    return app.configure(settings.env, function() {
      return app.use(express.errorHandler());
    });
  });

  app.get('/', function(req, res) {
    console.log("Hello World!");
    return res.render('index.jade', {
      env: settings.env
    });
  });

  app.post('/db/ref', function(req, res) {
    var doc;
    logger.info("post to /db/ref");
    doc = _.isString(req.body.doc) ? JSON.parse(req.body.doc) : req.body.doc;
    return dataSetCache.refUpsert(doc, function(err, _id) {
      if (err) {
        logger.error(prettyjson.render(err));
        return res.send(500, err);
      } else {
        return res.send({
          _id: _id
        });
      }
    });
  });

  app.get('/db/ref/:_id', function(req, res) {
    logger.debug("Looking up ref with _id: " + (req.param('_id')));
    return dataSetCache.refGet(req.param('_id'), function(err, doc) {
      return res.send(doc);
    });
  });

  app.post('/db/delete/ref/:_id', function(req, res) {
    logger.debug("Looking up ref with _id: " + (req.param('_id')));
    return dataSetCache.refDelete(req.param('_id'), function(err, outcome) {
      if (err) {
        logger.error(prettyjson.render(err));
        return res.send(500, err);
      } else {
        logger.error(prettyjson.render(outcome));
        return res.send({
          success: outcome
        });
      }
    });
  });

  app.post('/dataset/query', function(req, res) {
    return dbLogic.queryDataSet(req.body.doc, function(err, results) {
      if (err) {
        logger.error(prettyjson.render(err));
        return res.send(500, err);
      } else {
        return res.send(results);
      }
    });
  });

  app.get('/dataset/query/:_id', function(req, res) {
    logger.debug("Looking up data set with _id: " + (req.param('_id')));
    return dataSetCache.refGet(req.param('_id'), function(err, doc) {
      return dbLogic.loadDataSet(doc, function(err, results) {
        if (err) {
          logger.error("Error loading dataset: " + (prettyjson.render(err)));
          res.send(500, err);
        } else {

        }
        return res.send(results);
      });
    });
  });

  app.get('/db/info/:ref/:schema/:table', function(req, res) {
    var fieldRestrictionQuery;
    fieldRestrictionQuery = req.query['fieldRestrictionQuery'];
    fieldRestrictionQuery = (fieldRestrictionQuery != null) && fieldRestrictionQuery !== '' ? JSON.parse(new Buffer(fieldRestrictionQuery, 'base64').toString('ascii')) : void 0;
    logger.debug(prettyjson.render(fieldRestrictionQuery));
    return dbInfo.getFields(req.param('ref'), req.param('schema'), req.param('table'), fieldRestrictionQuery, function(err, output) {
      return res.send(output);
    });
  });

  app.get('/db/info/:ref/:schema', function(req, res) {
    return dbInfo.getTables(req.param('ref'), req.param('schema'), function(err, output) {
      return res.send(output);
    });
  });

  app.get('/db/info/:ref', function(req, res) {
    return dbInfo.getSchemas(req.param('ref'), function(err, output) {
      return res.send(output);
    });
  });

  app.get('/db/info', function(req, res) {
    return res.send(_.map(settings.db_refs, function(item) {
      return {
        name: item.name,
        type: item.type
      };
    }));
  });

  process.on('exit', function() {
    logger.info("process exiting.");
    return app.close();
  });

  http.createServer(app).listen(app.get('port'), app.get('ipAddress'), function() {
    return logger.info("Data glue server listening on " + (app.get('ipAddress')) + ":" + (app.get('port')));
  });

}).call(this);

/*
//@ sourceMappingURL=app.map
*/
